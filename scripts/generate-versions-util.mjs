import md5Hasher from 'md5';
import path from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const ZERO_MD5 = '000000000000000000000000000000000'

const versionPropertyPrefixes = ['firmware', 'deviceProtocol', 'moduleProtocol', 'userConfig', 'hardwareConfig', 'smartMacros', 'dongleProtocol'];
const patchVersions = ['Major', 'Minor', 'Patch'];

/**
 * @typedef {object} GitInfo
 * @property {string} repo
 * @property {string} tag
 */

/**
 * @param {object} packageJson - The package.json file
 * @param {GitInfo} gitInfo
 * @param {boolean} useRealShas - If true, use real data. If false, use "0" data.
 */
export function generateVersions({packageJson, gitInfo, useRealShas, useZeroVersions}) {
  packageJson = structuredClone(packageJson)

  gitInfo = useZeroVersions
    ? {
      repo: '',
      tag: ''
    }
    : gitInfo

  const versionVariables = versionPropertyPrefixes.map(versionPropertyPrefix => {
    const versionPropertyName = `${versionPropertyPrefix}Version`
    const versionPropertyValues = packageJson[versionPropertyName].split('.');
    const versionNumbers = patchVersions.map(() => useZeroVersions ? "0" : versionPropertyValues.shift()).join(', ');
    return `const version_t ${versionPropertyPrefix}Version = { ${versionNumbers} };`;
  }).join('\n');

  const deviceMd5Sums = packageJson.devices.map(device => {
    const md5 = useRealShas
      ? calculateMd5ChecksumOfFile(path.join(__dirname, '..', device.source))
      : ZERO_MD5;

    device.md5 = md5;

    return `    [${device.deviceId}] = "${md5}",`;
  }).join('\n');

  const moduleMd5Sums = packageJson.modules.map(module => {
    const md5 = useRealShas
      ? calculateMd5ChecksumOfFile(path.join(__dirname, '..', module.source))
      : ZERO_MD5;

    module.md5 = md5;

    return `    [${module.moduleId}] = "${md5}",`;
  }).join('\n');

  fs.writeFileSync(path.join(__dirname, '..', 'shared', 'versions.c'),
    `// Please do not edit this file by hand!
// It is to be regenerated by /scripts/generate-versions-h.js
#include "versioning.h"

${versionVariables}

const char gitRepo[] = "${gitInfo.repo}";
const char gitTag[] = "${gitInfo.tag}";

#ifdef DEVICE_COUNT
const char *const DeviceMD5Checksums[DEVICE_COUNT + 1] = {
${deviceMd5Sums}
};
#endif

const char *const ModuleMD5Checksums[ModuleId_AllCount] = {
${moduleMd5Sums}
};
`);

  return {
    devices: packageJson.devices,
    modules: packageJson.modules,
  }
}

function calculateMd5ChecksumOfFile(filePath) {
  return md5Hasher(fs.readFileSync(filePath, {encoding: 'binary'}));
}
